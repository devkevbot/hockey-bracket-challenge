// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Winner {
  TOP
  BOTTOM
  UNKNOWN
}

model Series {
  id                      String  @id @default(cuid())
  round                   Int
  slug                    String
  // Score is TOP SEED WINS - BOT SEED WINS
  score                   String
  topSeedTeamName         String
  topSeedTeamNameShort    String
  topSeedWins             Int
  bottomSeedTeamName      String
  bottomSeedTeamNameShort String
  bottomSeedWins          Int
  winner                  Winner  @default(UNKNOWN)
  currGameStartTime       String?

  @@unique([slug])
}

model Prediction {
  id     String @id @default(cuid())
  userId String
  slug   String @default(cuid())
  score  String

  @@unique([userId, slug])
  @@index([userId])
  @@index([slug])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
