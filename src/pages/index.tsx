import { useState } from "react";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";

function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-400">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            <span className="text-slate-800">NHL</span> Playoff Predictions
          </h1>
          <h2 className="text-4xl font-bold tracking-tight text-white sm:text-[4rem]">
            2023 Edition
          </h2>
          <Authentication />
        </div>
      </main>
    </>
  );
}

export default Home;

function Authentication() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined,
    { enabled: sessionData?.user !== undefined }
  );

  const SERIES: Series[] = [
    {
      id: "1",
      startDate: new Date("2024-04-17").toISOString(),
      highSeed: {
        id: "1",
        fullName: "Vegas Golden Knights",
        shortName: "VGK",
      },
      lowSeed: {
        id: "2",
        fullName: "Winnipeg Jets",
        shortName: "WPG",
      },
    },
  ];

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
      {SERIES.map((series, index) => {
        return <Series {...series} key={index} />;
      })}
    </div>
  );
}

interface Team {
  id: string;
  fullName: string;
  shortName: string;
}

interface Series {
  id: string;
  startDate: string;
  highSeed: Team;
  lowSeed: Team;
}

function Series(data: Series) {
  const [prediction, setPrediction] = useState<string>("Choose an option");

  const hasSeriesStarted = new Date(data.startDate) <= new Date();

  return (
    <>
      <div className="flex flex-col items-center gap-4 rounded-md border-2 border-black bg-slate-100 p-4 drop-shadow-lg">
        <span className="text-xl font-semibold">{data.highSeed.fullName}</span>
        <div className="flex w-full items-center">
          <hr className="w-full border-2 border-black" />
          <span className="px-2 font-bold">VS</span>
          <hr className="w-full border-2 border-black" />
        </div>
        <span className="text-xl font-semibold">{data.lowSeed.fullName}</span>
        <h3 className="text-xl font-semibold">Prediction: </h3>
        <select
          className="px-4 py-2"
          value={prediction}
          onChange={(event) => setPrediction(event.target.value)}
          disabled={hasSeriesStarted}
        >
          <option disabled selected>
            Choose an option
          </option>
          <option>4-0 {data.highSeed.shortName}</option>
          <option>4-1 {data.highSeed.shortName}</option>
          <option>4-2 {data.highSeed.shortName}</option>
          <option>4-3 {data.highSeed.shortName}</option>
          <option>4-0 {data.lowSeed.shortName}</option>
          <option>4-1 {data.lowSeed.shortName} </option>
          <option>4-2 {data.lowSeed.shortName} </option>
          <option>4-3 {data.lowSeed.shortName} </option>
        </select>
        <h3 className="text-xl font-semibold">Series score:</h3>
        <p>
          {hasSeriesStarted
            ? `${data.highSeed.shortName} 0 - ${data.lowSeed.shortName} 0`
            : "Series not started"}
        </p>
      </div>
    </>
  );
}
