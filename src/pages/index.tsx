import { useState } from "react";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";

function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-400">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            <span className="text-slate-800">NHL</span> Playoff Predictions
          </h1>
          <h2 className="text-4xl font-bold tracking-tight text-white sm:text-[4rem]">
            2023 Edition
          </h2>
          <Authentication />
        </div>
      </main>
    </>
  );
}

export default Home;

function Authentication() {
  const { data: sessionData } = useSession();

  const { data: series } = api.series.getAll.useQuery();
  console.log({ series });

  const { data: predictions } = api.prediction.getAll.useQuery();
  console.log({ predictions });

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
      <div className="grid grid-cols-4 gap-8">
        {sessionData &&
          series &&
          predictions &&
          series.map((series, index) => {
            const userPredictedScore = predictions.find(
              (p) => p.seriesId === series.id
            )?.score;
            return (
              <Series
                {...series}
                userPredictedScore={userPredictedScore}
                key={index}
              />
            );
          })}
      </div>
    </div>
  );
}

interface Team {
  id: string;
  fullName: string;
  shortName: string;
  score: string;
  isHighSeed: boolean;
}

interface SeriesProps {
  id: string;
  startDate: Date;
  teams: Team[];
  userPredictedScore?: string;
}

function Series(data: SeriesProps) {
  const defaultPrediction = "Choose an option";

  const [prediction, setPrediction] = useState<string>(
    data.userPredictedScore || defaultPrediction
  );
  const mutation = api.prediction.upsert.useMutation();

  function onChangePrediction(seriesId: string, score: string) {
    setPrediction(score);

    mutation.mutate({ seriesId, score });
  }

  const hasSeriesStarted = data.startDate <= new Date();

  const highSeed = data.teams.find((t) => t.isHighSeed);
  const lowSeed = data.teams.find((t) => t.id !== highSeed?.id);

  if (!highSeed || !lowSeed) {
    return null;
  }

  return (
    <>
      <div className="flex flex-col items-center gap-4 rounded-md border-2 border-black bg-slate-100 p-4 drop-shadow-lg">
        <span className="text-xl font-semibold">{highSeed.fullName}</span>
        <div className="flex w-full items-center">
          <hr className="w-full border-2 border-black" />
          <span className="px-2 font-bold">VS</span>
          <hr className="w-full border-2 border-black" />
        </div>
        <span className="text-xl font-semibold">{lowSeed.fullName}</span>
        <h3 className="text-xl font-semibold">Prediction: </h3>
        <select
          className="px-4 py-2"
          value={prediction}
          onChange={(event) => onChangePrediction(data.id, event.target.value)}
          disabled={hasSeriesStarted}
        >
          <option disabled selected>
            {defaultPrediction}
          </option>
          <option>4-0 {highSeed.shortName}</option>
          <option>4-1 {highSeed.shortName}</option>
          <option>4-2 {highSeed.shortName}</option>
          <option>4-3 {highSeed.shortName}</option>
          <option>4-0 {lowSeed.shortName}</option>
          <option>4-1 {lowSeed.shortName} </option>
          <option>4-2 {lowSeed.shortName} </option>
          <option>4-3 {lowSeed.shortName} </option>
        </select>
        <h3 className="text-xl font-semibold">Series score:</h3>
        <p>
          {hasSeriesStarted
            ? `${highSeed.shortName} 0 - ${lowSeed.shortName} 0`
            : "Series not started"}
        </p>
      </div>
    </>
  );
}
